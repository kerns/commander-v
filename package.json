{
  "name": "commander-v",
  "displayName": "Commander V",
  "publisher": "kerns",
  "activationEvents": [
    "onCommand:extension.commanderV"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/kerns/commander-v"
  },
  "description": "Improves AI pair programming workflows by making it easy to share the current state and structure of your code.",
  "version": "2.4.7",
  "keywords": [
    "Commander V",
    "AI",
    "Machine Learning",
    "ChatGPT",
    "Claude AI",
    "Productivity"
  ],
  "icon": "src/commander_v_icon.png",
  "engines": {
    "vscode": "^1.77.0"
  },
  "categories": [
    "Data Science",
    "Machine Learning",
    "Other"
  ],
  "main": "./extension.js",
  "contributes": {
    "commands": [
      {
        "command": "extension.commanderV",
        "title": "Commander V"
      },
      {
        "command": "extension.commanderVReusePreviousSelection",
        "title": "Reuse last Commander V Selection"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "extension.commanderV",
          "when": "resource"
        },
        {
          "command": "extension.commanderVReusePreviousSelection",
          "when": "resource && commanderV.hasPreviousSelection"
        }
      ],
      "editor/title/context": [
        {
          "command": "extension.commanderV",
          "when": "resourceScheme == file"
        }
      ]
    },
    "keybindings": [
      {
        "command": "extension.commanderV",
        "key": "shift+ctrl+v",
        "mac": "shift+cmd+v"
      },
      {
        "command": "extension.commanderVReusePreviousSelection",
        "key": "shift+ctrl+r",
        "mac": "shift+cmd+r"
      }
    ],
    "configuration": {
      "title": "Commander V",
      "properties": {
        "commanderV.includeProjectTree": {
          "order": 1,
          "type": "boolean",
          "default": true,
          "description": "Include an ASCII tree representing your project's directory structure in the payload sent to your clipboard"
        },
        "commanderV.projectTreeDepth": {
          "order": 2,
          "type": "number",
          "default": 3,
          "description": "The maximum depth of directories to include in the generated ASCII tree. Not applied when \"Prune Project Tree\" is enabled."
        },
        "commanderV.pruneProjectTree": {
          "order": 4,
          "type": "boolean",
          "default": true,
          "description": "Limit the tree to only include files that have been selected"
        },
        "commanderV.orderFilesBy": {
          "order": 5,
          "type": "string",
          "default": "treeOrder",
          "enum": [
            "treeOrder",
            "selectionOrder"
          ],
          "enumDescriptions": [
            "by position in the tree...",
            "by order of selection..."
          ],
          "description": "Specify how to sort files when concatenating their content"
        },
        "commanderV.ignoreFile": {
          "order": 6,
          "type": "string",
          "default": ".gitignore",
          "title": "Ignore File",
          "description": "Path to your ignore file, containing patterns to exclude from the generated ASCII tree. Not applied when \"Prune Project Tree\" is enabled.",
          "examples": [
            ".com-v.ignore"
          ]
        },
        "commanderV.commentAtFileBegin": {
          "order": 7,
          "type": "string",
          "default": "/* --- Begin $file --- */",
          "description": "Opening comment shown at the beginning of every file. Use $file as a placeholder for the file path"
        },
        "commanderV.commentAtFileEnd": {
          "order": 8,
          "type": "string",
          "default": "/* --- End $file --- */",
          "description": "Closing comment shown at the end of every file. Use $file as a placeholder for the file path"
        },
        "commanderV.includeSeparator": {
          "order": 9,
          "type": "boolean",
          "default": false,
          "description": "Insert a visual separator between concatenated files to improve readability"
        },
        "commanderV.separatorCharacter": {
          "order": 10,
          "type": "string",
          "default": "-",
          "maxLength": 3,
          "description": "The character to use for the separator between file contents (max 3 characters)",
          "visibleWhen": "commanderV.includeSeparator == true"
        },
        "commanderV.separatorLength": {
          "order": 11,
          "type": "number",
          "default": 16,
          "minimum": 1,
          "maximum": 120,
          "description": "The length of the separator between file contents (1-120)",
          "visibleWhen": "commanderV.includeSeparator == true"
        },
        "commanderV.wrapInCodeBlock": {
          "order": 12,
          "type": "boolean",
          "default": false,
          "description": "Wrap the concatenated file contents in a code block (```)"
        },
        "commanderV.playSoundOnComplete": {
          "order": 13,
          "type": "boolean",
          "default": true,
          "description": "Play a sound when operations are successful and output is delivered to you clipboard"
        },
        "commanderV.readFromEditor": {
          "order": 14,
          "type": "boolean",
          "default": false,
          "description": "Read unsaved file contents directly the editor if the file is open, otherwise read from the last saved file"
        }
      }
    }
  },
  "scripts": {
    "prepublishOnly": "vsce package",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "devDependencies": {
    "@types/node": "^18.0.0",
    "@vscode/test-electron": "^2.3.0"
  },
  "dependencies": {
    "@agarimo/archy": "^1.0.0",
    "directory-tree": "^3.5.0",
    "play-sound": "^1.1.5"
  }
}
